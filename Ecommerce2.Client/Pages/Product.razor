@using ECommerce2.Client.Interfaces
@using ECommerce2.Shared.Dtos

@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject IPaymentTicketService PaymentTicketService

@page "/product/{ProductId:guid}"

@if (_isLoading)
{
    <MudProgressLinear />
}
else
{
    <MudContainer Class="page-container">
        <MudStack Row="true">
            <MudImage Src="\Images\monitor_img.jpg" 
                      Alt="Foto do produto"
                      Style="width: 45%;"/>

            <MudStack Style="width: 55%; border: 1px solid gray;">
                <MudStack Row="true">
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.Star"/>
                        <MudText>Novo</MudText>
                    </MudStack>

                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" />
                        <MudText>12 meses de garantia</MudText>
                    </MudStack>
                </MudStack>

                <MudText Style="font-size: 2rem;">@_productDto.Name</MudText>
                <MudText>CÓD: @_productDto.Code</MudText>

                <MudStack Spacing="1">
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Filled.Payment" />
                        <MudText>@($"De R$ {_productDto.Price.ToString("F2")} por:")</MudText>
                    </MudStack>

                    <MudText Style="font-size: 2rem; color: rgb(115, 195, 0);">@($"R$ {GetSalePrice()}")</MudText>
                    <MudText>A vista com 15% de desconto no boleto</MudText>
                </MudStack>
            
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           OnClick="Buy">
                    Comprar
                </MudButton>
            </MudStack>
        </MudStack>
    </MudContainer>
}

@code {
    [Parameter] public Guid ProductId { get; set; }

    private ProductDto _productDto = new();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _productDto = await ProductService.Get(ProductId);
        _isLoading = false;
    }

    private string GetSalePrice()
    {
        double salePrice = _productDto.Price - _productDto.Price * 0.15;
        return salePrice.ToString("F2");
    }

    private async Task Buy()
    {
        PaymentTicketDto paymentTicketDto = CreatePaymentTicket();
        bool result = await PaymentTicketService.CreateNewTicket(paymentTicketDto);
        if (result)
        {
            await PaymentTicketService.Post(paymentTicketDto);
            Snackbar.Add("Boleto gerado com sucesso", Severity.Success);
        } else
        {
            Snackbar.Add("Erro ao gerar boleto", Severity.Error);
        }
    }

    private PaymentTicketDto CreatePaymentTicket()
    {
        var paymentTicketDto = new PaymentTicketDto
        {
            Bank = "237",
            Agency = "3125-9",
            AccountNumber = "21113-3",
            Wallet = "12",

            BeneficiaryName = "Ricardo Jacques",
            BeneficiaryCprf = "05474391056",
            BeneficiaryAddressCep = "Rua Capão da Canoa",
            BeneficiaryAddressUf = "RS",
            BeneficiaryAddressLocality = "Canoas",
            BeneficiaryAddressNeighborhood = "Estância Velha",
            BeneficiaryAddressStreet = "Capão da Canoa",
            BeneficiaryAddressNumber = "741",
            BeneficiaryAddresscomplement = "Próximo a Vidraçaria Boqueirão",

            TicketCreated = DateTime.UtcNow,
            TicketDueDate = DateTime.UtcNow.AddDays(2),
            TicketDocument = "EX1",
            TicketNumber = "1",
            TicketTitle = "Teste Serviço API",
            TicketValue = 350.30,
            TicketInstruction = "Teste boleto",

            PayerName = "Daniel",
            PayerCprf = "02354715936",
            PayerAddressCep = "92032-080",
            PayerAddressUf = "RS",
            PayerAddressLocality = "Canoas",
            PayerAddressNeighborhood = "Estância Velha",
            PayerAddressStreet = "Capão da Canoa",
            PayerAddressNumber = "741",
            PayerAddresscomplement = "Próximo a Vidraçaria Boqueirão",
        };

        return paymentTicketDto;
    }
}